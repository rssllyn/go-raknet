/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: wrapper.i

#define SWIGMODULE wrapper

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}


#include "RakPeerInterface.h"
#include "RakNetTypes.h"
#include "PacketPriority.h"
#include "MessageIdentifiers.h"
#include "RakNetTime.h"


unsigned char GetPacketIdentifier(RakNet::Packet *p)
{
    if ((unsigned char)p->data[0] == ID_TIMESTAMP)
        return (unsigned char) p->data[sizeof(RakNet::MessageID) + sizeof(RakNet::Time)];
    else
        return (unsigned char) p->data[0];
}

char *GetPacketPayload(RakNet::Packet *p)
{
    if ((unsigned char)p->data[0] == ID_TIMESTAMP)
        return (char *)p->data + sizeof(RakNet::MessageID) + sizeof(RakNet::Time) + 1;
    else
        return (char *)p->data + 1;
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_wrapper_e0979a90da1444b2(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


char _wrap_GetPacketIdentifier_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result = (unsigned char)GetPacketIdentifier(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_GetPacketPayload_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result = (char *)GetPacketPayload(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_ESTABLISH_UNIDIRECTIONAL_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_ESTABLISH_UNIDIRECTIONAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_ESTABLISH_BIDIRECTIONAL_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_ESTABLISH_BIDIRECTIONAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_TYPE_DETECT_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_TYPE_DETECT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROUTER_2_REPLY_TO_SENDER_PORT_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_ROUTER_2_REPLY_TO_SENDER_PORT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROUTER_2_REPLY_TO_SPECIFIED_PORT_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_ROUTER_2_REPLY_TO_SPECIFIED_PORT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROUTER_2_MINI_PUNCH_REPLY_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_ROUTER_2_MINI_PUNCH_REPLY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROUTER_2_MINI_PUNCH_REPLY_BOUNCE_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_ROUTER_2_MINI_PUNCH_REPLY_BOUNCE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_XBOX_360_VOICE_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_XBOX_360_VOICE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_XBOX_360_GET_NETWORK_ROOM_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_XBOX_360_GET_NETWORK_ROOM;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_XBOX_360_RETURN_NETWORK_ROOM_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_XBOX_360_RETURN_NETWORK_ROOM;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_PING_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_PING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_PONG_wrapper_e0979a90da1444b2() {
  OutOfBandIdentifiers result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_PONG;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CONNECTED_PING_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CONNECTED_PING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_UNCONNECTED_PING_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_UNCONNECTED_PING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_UNCONNECTED_PING_OPEN_CONNECTIONS_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_UNCONNECTED_PING_OPEN_CONNECTIONS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CONNECTED_PONG_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CONNECTED_PONG;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_DETECT_LOST_CONNECTIONS_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_DETECT_LOST_CONNECTIONS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_OPEN_CONNECTION_REQUEST_1_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_OPEN_CONNECTION_REQUEST_1;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_OPEN_CONNECTION_REPLY_1_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_OPEN_CONNECTION_REPLY_1;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_OPEN_CONNECTION_REQUEST_2_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_OPEN_CONNECTION_REQUEST_2;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_OPEN_CONNECTION_REPLY_2_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_OPEN_CONNECTION_REPLY_2;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CONNECTION_REQUEST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CONNECTION_REQUEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_REMOTE_SYSTEM_REQUIRES_PUBLIC_KEY_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_REMOTE_SYSTEM_REQUIRES_PUBLIC_KEY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_OUR_SYSTEM_REQUIRES_SECURITY_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_OUR_SYSTEM_REQUIRES_SECURITY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_PUBLIC_KEY_MISMATCH_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_PUBLIC_KEY_MISMATCH;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_OUT_OF_BAND_INTERNAL_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_OUT_OF_BAND_INTERNAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_SND_RECEIPT_ACKED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_SND_RECEIPT_ACKED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_SND_RECEIPT_LOSS_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_SND_RECEIPT_LOSS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CONNECTION_REQUEST_ACCEPTED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CONNECTION_REQUEST_ACCEPTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CONNECTION_ATTEMPT_FAILED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CONNECTION_ATTEMPT_FAILED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ALREADY_CONNECTED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_ALREADY_CONNECTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NEW_INCOMING_CONNECTION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NEW_INCOMING_CONNECTION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NO_FREE_INCOMING_CONNECTIONS_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NO_FREE_INCOMING_CONNECTIONS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_DISCONNECTION_NOTIFICATION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_DISCONNECTION_NOTIFICATION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CONNECTION_LOST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CONNECTION_LOST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CONNECTION_BANNED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CONNECTION_BANNED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_INVALID_PASSWORD_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_INVALID_PASSWORD;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_INCOMPATIBLE_PROTOCOL_VERSION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_INCOMPATIBLE_PROTOCOL_VERSION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_IP_RECENTLY_CONNECTED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_IP_RECENTLY_CONNECTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TIMESTAMP_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TIMESTAMP;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_UNCONNECTED_PONG_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_UNCONNECTED_PONG;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ADVERTISE_SYSTEM_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_ADVERTISE_SYSTEM;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_DOWNLOAD_PROGRESS_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_DOWNLOAD_PROGRESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_REMOTE_DISCONNECTION_NOTIFICATION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_REMOTE_DISCONNECTION_NOTIFICATION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_REMOTE_CONNECTION_LOST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_REMOTE_CONNECTION_LOST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_REMOTE_NEW_INCOMING_CONNECTION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_REMOTE_NEW_INCOMING_CONNECTION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FILE_LIST_TRANSFER_HEADER_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FILE_LIST_TRANSFER_HEADER;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FILE_LIST_TRANSFER_FILE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FILE_LIST_TRANSFER_FILE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FILE_LIST_REFERENCE_PUSH_ACK_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FILE_LIST_REFERENCE_PUSH_ACK;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_DDT_DOWNLOAD_REQUEST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_DDT_DOWNLOAD_REQUEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TRANSPORT_STRING_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TRANSPORT_STRING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_REPLICA_MANAGER_CONSTRUCTION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_REPLICA_MANAGER_CONSTRUCTION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_REPLICA_MANAGER_SCOPE_CHANGE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_REPLICA_MANAGER_SCOPE_CHANGE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_REPLICA_MANAGER_SERIALIZE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_REPLICA_MANAGER_SERIALIZE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_REPLICA_MANAGER_DOWNLOAD_STARTED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_REPLICA_MANAGER_DOWNLOAD_STARTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_REPLICA_MANAGER_DOWNLOAD_COMPLETE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_REPLICA_MANAGER_DOWNLOAD_COMPLETE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RAKVOICE_OPEN_CHANNEL_REQUEST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RAKVOICE_OPEN_CHANNEL_REQUEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RAKVOICE_OPEN_CHANNEL_REPLY_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RAKVOICE_OPEN_CHANNEL_REPLY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RAKVOICE_CLOSE_CHANNEL_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RAKVOICE_CLOSE_CHANNEL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RAKVOICE_DATA_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RAKVOICE_DATA;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_GET_CHANGELIST_SINCE_DATE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_GET_CHANGELIST_SINCE_DATE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_CREATION_LIST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_CREATION_LIST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_DELETION_LIST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_DELETION_LIST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_GET_PATCH_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_GET_PATCH;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_PATCH_LIST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_PATCH_LIST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_REPOSITORY_FATAL_ERROR_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_REPOSITORY_FATAL_ERROR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_CANNOT_DOWNLOAD_ORIGINAL_UNMODIFIED_FILES_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_CANNOT_DOWNLOAD_ORIGINAL_UNMODIFIED_FILES;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_FINISHED_INTERNAL_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_FINISHED_INTERNAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_FINISHED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_FINISHED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_AUTOPATCHER_RESTART_APPLICATION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_AUTOPATCHER_RESTART_APPLICATION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_PUNCHTHROUGH_REQUEST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_PUNCHTHROUGH_REQUEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_CONNECT_AT_TIME_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_CONNECT_AT_TIME;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_GET_MOST_RECENT_PORT_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_GET_MOST_RECENT_PORT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_CLIENT_READY_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_CLIENT_READY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_TARGET_NOT_CONNECTED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_TARGET_NOT_CONNECTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_TARGET_UNRESPONSIVE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_TARGET_UNRESPONSIVE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_CONNECTION_TO_TARGET_LOST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_CONNECTION_TO_TARGET_LOST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_ALREADY_IN_PROGRESS_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_ALREADY_IN_PROGRESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_PUNCHTHROUGH_FAILED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_PUNCHTHROUGH_FAILED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_PUNCHTHROUGH_SUCCEEDED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_PUNCHTHROUGH_SUCCEEDED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_READY_EVENT_SET_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_READY_EVENT_SET;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_READY_EVENT_UNSET_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_READY_EVENT_UNSET;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_READY_EVENT_ALL_SET_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_READY_EVENT_ALL_SET;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_READY_EVENT_QUERY_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_READY_EVENT_QUERY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_LOBBY_GENERAL_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_LOBBY_GENERAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RPC_REMOTE_ERROR_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RPC_REMOTE_ERROR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RPC_PLUGIN_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RPC_PLUGIN;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FILE_LIST_REFERENCE_PUSH_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FILE_LIST_REFERENCE_PUSH;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_READY_EVENT_FORCE_ALL_SET_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_READY_EVENT_FORCE_ALL_SET;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROOMS_EXECUTE_FUNC_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_ROOMS_EXECUTE_FUNC;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROOMS_LOGON_STATUS_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_ROOMS_LOGON_STATUS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROOMS_HANDLE_CHANGE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_ROOMS_HANDLE_CHANGE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_LOBBY2_SEND_MESSAGE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_LOBBY2_SEND_MESSAGE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_LOBBY2_SERVER_ERROR_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_LOBBY2_SERVER_ERROR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_NEW_HOST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_NEW_HOST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_REQUEST_FCMGUID_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_REQUEST_FCMGUID;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_RESPOND_CONNECTION_COUNT_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_RESPOND_CONNECTION_COUNT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_INFORM_FCMGUID_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_INFORM_FCMGUID;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_UPDATE_MIN_TOTAL_CONNECTION_COUNT_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_UPDATE_MIN_TOTAL_CONNECTION_COUNT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_VERIFIED_JOIN_START_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_VERIFIED_JOIN_START;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_VERIFIED_JOIN_CAPABLE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_VERIFIED_JOIN_CAPABLE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_VERIFIED_JOIN_FAILED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_VERIFIED_JOIN_FAILED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_VERIFIED_JOIN_ACCEPTED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_VERIFIED_JOIN_ACCEPTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_VERIFIED_JOIN_REJECTED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_VERIFIED_JOIN_REJECTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_UDP_PROXY_GENERAL_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_UDP_PROXY_GENERAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_SQLite3_EXEC_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_SQLite3_EXEC;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_SQLite3_UNKNOWN_DB_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_SQLite3_UNKNOWN_DB;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_SQLLITE_LOGGER_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_SQLLITE_LOGGER;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_TYPE_DETECTION_REQUEST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_TYPE_DETECTION_REQUEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_TYPE_DETECTION_RESULT_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_TYPE_DETECTION_RESULT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROUTER_2_INTERNAL_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_ROUTER_2_INTERNAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROUTER_2_FORWARDING_NO_PATH_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_ROUTER_2_FORWARDING_NO_PATH;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROUTER_2_FORWARDING_ESTABLISHED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_ROUTER_2_FORWARDING_ESTABLISHED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_ROUTER_2_REROUTED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_ROUTER_2_REROUTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TEAM_BALANCER_INTERNAL_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TEAM_BALANCER_INTERNAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TEAM_BALANCER_REQUESTED_TEAM_FULL_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TEAM_BALANCER_REQUESTED_TEAM_FULL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TEAM_BALANCER_REQUESTED_TEAM_LOCKED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TEAM_BALANCER_REQUESTED_TEAM_LOCKED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TEAM_BALANCER_TEAM_REQUESTED_CANCELLED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TEAM_BALANCER_TEAM_REQUESTED_CANCELLED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TEAM_BALANCER_TEAM_ASSIGNED_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TEAM_BALANCER_TEAM_ASSIGNED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_LIGHTSPEED_INTEGRATION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_LIGHTSPEED_INTEGRATION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_XBOX_LOBBY_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_XBOX_LOBBY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TWO_WAY_AUTHENTICATION_INCOMING_CHALLENGE_SUCCESS_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TWO_WAY_AUTHENTICATION_INCOMING_CHALLENGE_SUCCESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TWO_WAY_AUTHENTICATION_OUTGOING_CHALLENGE_SUCCESS_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TWO_WAY_AUTHENTICATION_OUTGOING_CHALLENGE_SUCCESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TWO_WAY_AUTHENTICATION_INCOMING_CHALLENGE_FAILURE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TWO_WAY_AUTHENTICATION_INCOMING_CHALLENGE_FAILURE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TWO_WAY_AUTHENTICATION_OUTGOING_CHALLENGE_FAILURE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TWO_WAY_AUTHENTICATION_OUTGOING_CHALLENGE_FAILURE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TWO_WAY_AUTHENTICATION_OUTGOING_CHALLENGE_TIMEOUT_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TWO_WAY_AUTHENTICATION_OUTGOING_CHALLENGE_TIMEOUT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_TWO_WAY_AUTHENTICATION_NEGOTIATION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_TWO_WAY_AUTHENTICATION_NEGOTIATION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CLOUD_POST_REQUEST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CLOUD_POST_REQUEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CLOUD_RELEASE_REQUEST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CLOUD_RELEASE_REQUEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CLOUD_GET_REQUEST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CLOUD_GET_REQUEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CLOUD_GET_RESPONSE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CLOUD_GET_RESPONSE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CLOUD_UNSUBSCRIBE_REQUEST_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CLOUD_UNSUBSCRIBE_REQUEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CLOUD_SERVER_TO_SERVER_COMMAND_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CLOUD_SERVER_TO_SERVER_COMMAND;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_CLOUD_SUBSCRIPTION_NOTIFICATION_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_CLOUD_SUBSCRIPTION_NOTIFICATION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_LIB_VOICE_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_LIB_VOICE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RELAY_PLUGIN_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RELAY_PLUGIN;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_REQUEST_BOUND_ADDRESSES_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_REQUEST_BOUND_ADDRESSES;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_NAT_RESPOND_BOUND_ADDRESSES_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_NAT_RESPOND_BOUND_ADDRESSES;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_FCM2_UPDATE_USER_CONTEXT_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_FCM2_UPDATE_USER_CONTEXT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RESERVED_3_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RESERVED_3;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RESERVED_4_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RESERVED_4;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RESERVED_5_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RESERVED_5;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RESERVED_6_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RESERVED_6;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RESERVED_7_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RESERVED_7;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RESERVED_8_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RESERVED_8;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_RESERVED_9_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_RESERVED_9;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ID_USER_PACKET_ENUM_wrapper_e0979a90da1444b2() {
  DefaultMessageIDTypes result;
  intgo _swig_go_result;
  
  
  result = ID_USER_PACKET_ENUM;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_IMMEDIATE_PRIORITY_wrapper_e0979a90da1444b2() {
  PacketPriority result;
  intgo _swig_go_result;
  
  
  result = IMMEDIATE_PRIORITY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HIGH_PRIORITY_wrapper_e0979a90da1444b2() {
  PacketPriority result;
  intgo _swig_go_result;
  
  
  result = HIGH_PRIORITY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MEDIUM_PRIORITY_wrapper_e0979a90da1444b2() {
  PacketPriority result;
  intgo _swig_go_result;
  
  
  result = MEDIUM_PRIORITY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_LOW_PRIORITY_wrapper_e0979a90da1444b2() {
  PacketPriority result;
  intgo _swig_go_result;
  
  
  result = LOW_PRIORITY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_NUMBER_OF_PRIORITIES_wrapper_e0979a90da1444b2() {
  PacketPriority result;
  intgo _swig_go_result;
  
  
  result = NUMBER_OF_PRIORITIES;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_UNRELIABLE_wrapper_e0979a90da1444b2() {
  PacketReliability result;
  intgo _swig_go_result;
  
  
  result = UNRELIABLE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_UNRELIABLE_SEQUENCED_wrapper_e0979a90da1444b2() {
  PacketReliability result;
  intgo _swig_go_result;
  
  
  result = UNRELIABLE_SEQUENCED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RELIABLE_wrapper_e0979a90da1444b2() {
  PacketReliability result;
  intgo _swig_go_result;
  
  
  result = RELIABLE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RELIABLE_ORDERED_wrapper_e0979a90da1444b2() {
  PacketReliability result;
  intgo _swig_go_result;
  
  
  result = RELIABLE_ORDERED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RELIABLE_SEQUENCED_wrapper_e0979a90da1444b2() {
  PacketReliability result;
  intgo _swig_go_result;
  
  
  result = RELIABLE_SEQUENCED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_UNRELIABLE_WITH_ACK_RECEIPT_wrapper_e0979a90da1444b2() {
  PacketReliability result;
  intgo _swig_go_result;
  
  
  result = UNRELIABLE_WITH_ACK_RECEIPT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RELIABLE_WITH_ACK_RECEIPT_wrapper_e0979a90da1444b2() {
  PacketReliability result;
  intgo _swig_go_result;
  
  
  result = RELIABLE_WITH_ACK_RECEIPT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RELIABLE_ORDERED_WITH_ACK_RECEIPT_wrapper_e0979a90da1444b2() {
  PacketReliability result;
  intgo _swig_go_result;
  
  
  result = RELIABLE_ORDERED_WITH_ACK_RECEIPT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_NUMBER_OF_RELIABILITIES_wrapper_e0979a90da1444b2() {
  PacketReliability result;
  intgo _swig_go_result;
  
  
  result = NUMBER_OF_RELIABILITIES;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RAKNET_STARTED_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::RAKNET_STARTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RAKNET_ALREADY_STARTED_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::RAKNET_ALREADY_STARTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_INVALID_SOCKET_DESCRIPTORS_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::INVALID_SOCKET_DESCRIPTORS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_INVALID_MAX_CONNECTIONS_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::INVALID_MAX_CONNECTIONS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SOCKET_FAMILY_NOT_SUPPORTED_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::SOCKET_FAMILY_NOT_SUPPORTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SOCKET_PORT_ALREADY_IN_USE_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::SOCKET_PORT_ALREADY_IN_USE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SOCKET_FAILED_TO_BIND_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::SOCKET_FAILED_TO_BIND;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SOCKET_FAILED_TEST_SEND_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::SOCKET_FAILED_TEST_SEND;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PORT_CANNOT_BE_ZERO_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::PORT_CANNOT_BE_ZERO;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FAILED_TO_CREATE_NETWORK_THREAD_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::FAILED_TO_CREATE_NETWORK_THREAD;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_COULD_NOT_GENERATE_GUID_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::COULD_NOT_GENERATE_GUID;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_STARTUP_OTHER_FAILURE_wrapper_e0979a90da1444b2() {
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::STARTUP_OTHER_FAILURE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CONNECTION_ATTEMPT_STARTED_wrapper_e0979a90da1444b2() {
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::CONNECTION_ATTEMPT_STARTED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_INVALID_PARAMETER_wrapper_e0979a90da1444b2() {
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::INVALID_PARAMETER;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CANNOT_RESOLVE_DOMAIN_NAME_wrapper_e0979a90da1444b2() {
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::CANNOT_RESOLVE_DOMAIN_NAME;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ALREADY_CONNECTED_TO_ENDPOINT_wrapper_e0979a90da1444b2() {
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::ALREADY_CONNECTED_TO_ENDPOINT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CONNECTION_ATTEMPT_ALREADY_IN_PROGRESS_wrapper_e0979a90da1444b2() {
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::CONNECTION_ATTEMPT_ALREADY_IN_PROGRESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SECURITY_INITIALIZATION_FAILED_wrapper_e0979a90da1444b2() {
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  
  result = RakNet::SECURITY_INITIALIZATION_FAILED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


RakNet::SocketDescriptor *_wrap_new_SocketDescriptor__SWIG_0_wrapper_e0979a90da1444b2() {
  RakNet::SocketDescriptor *result = 0 ;
  RakNet::SocketDescriptor *_swig_go_result;
  
  
  result = (RakNet::SocketDescriptor *)new RakNet::SocketDescriptor();
  *(RakNet::SocketDescriptor **)&_swig_go_result = (RakNet::SocketDescriptor *)result; 
  return _swig_go_result;
}


RakNet::SocketDescriptor *_wrap_new_SocketDescriptor__SWIG_1_wrapper_e0979a90da1444b2(short _swig_go_0, _gostring_ _swig_go_1) {
  unsigned short arg1 ;
  char *arg2 = (char *) 0 ;
  RakNet::SocketDescriptor *result = 0 ;
  RakNet::SocketDescriptor *_swig_go_result;
  
  arg1 = (unsigned short)_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (RakNet::SocketDescriptor *)new RakNet::SocketDescriptor(arg1,(char const *)arg2);
  *(RakNet::SocketDescriptor **)&_swig_go_result = (RakNet::SocketDescriptor *)result; 
  return _swig_go_result;
}


void _wrap_SocketDescriptor_port_set_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0, short _swig_go_1) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  if (arg1) (arg1)->port = arg2;
  
}


short _wrap_SocketDescriptor_port_get_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  unsigned short result;
  short _swig_go_result;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  
  result = (unsigned short) ((arg1)->port);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SocketDescriptor_hostAddress_set_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0, _gostring_ _swig_go_1) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  char *arg2 ;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->hostAddress, (const char *)arg2, 32-1);
      arg1->hostAddress[32-1] = 0;
    } else {
      arg1->hostAddress[0] = 0;
    }
  }
  
}


_gostring_ _wrap_SocketDescriptor_hostAddress_get_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->hostAddress);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_SocketDescriptor_socketFamily_set_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0, short _swig_go_1) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  short arg2 ;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->socketFamily = arg2;
  
}


short _wrap_SocketDescriptor_socketFamily_get_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  
  result = (short) ((arg1)->socketFamily);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SocketDescriptor_remotePortRakNetWasStartedOn_PS3_PSP2_set_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0, short _swig_go_1) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  if (arg1) (arg1)->remotePortRakNetWasStartedOn_PS3_PSP2 = arg2;
  
}


short _wrap_SocketDescriptor_remotePortRakNetWasStartedOn_PS3_PSP2_get_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  unsigned short result;
  short _swig_go_result;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  
  result = (unsigned short) ((arg1)->remotePortRakNetWasStartedOn_PS3_PSP2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SocketDescriptor_chromeInstance_set_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0, intgo _swig_go_1) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  int arg2 ;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->chromeInstance = arg2;
  
}


intgo _wrap_SocketDescriptor_chromeInstance_get_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  
  result = (int) ((arg1)->chromeInstance);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SocketDescriptor_blockingSocket_set_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0, bool _swig_go_1) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  bool arg2 ;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->blockingSocket = arg2;
  
}


bool _wrap_SocketDescriptor_blockingSocket_get_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  
  result = (bool) ((arg1)->blockingSocket);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SocketDescriptor_extraSocketOptions_set_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0, intgo _swig_go_1) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->extraSocketOptions = arg2;
  
}


intgo _wrap_SocketDescriptor_extraSocketOptions_get_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->extraSocketOptions);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_SocketDescriptor_wrapper_e0979a90da1444b2(RakNet::SocketDescriptor *_swig_go_0) {
  RakNet::SocketDescriptor *arg1 = (RakNet::SocketDescriptor *) 0 ;
  
  arg1 = *(RakNet::SocketDescriptor **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_RakNetGUID_systemIndex_set_wrapper_e0979a90da1444b2(RakNet::RakNetGUID *_swig_go_0, short _swig_go_1) {
  RakNet::RakNetGUID *arg1 = (RakNet::RakNetGUID *) 0 ;
  RakNet::SystemIndex arg2 ;
  
  arg1 = *(RakNet::RakNetGUID **)&_swig_go_0; 
  arg2 = (RakNet::SystemIndex)_swig_go_1; 
  
  if (arg1) (arg1)->systemIndex = arg2;
  
}


short _wrap_RakNetGUID_systemIndex_get_wrapper_e0979a90da1444b2(RakNet::RakNetGUID *_swig_go_0) {
  RakNet::RakNetGUID *arg1 = (RakNet::RakNetGUID *) 0 ;
  RakNet::SystemIndex result;
  short _swig_go_result;
  
  arg1 = *(RakNet::RakNetGUID **)&_swig_go_0; 
  
  result = (RakNet::SystemIndex) ((arg1)->systemIndex);
  _swig_go_result = result; 
  return _swig_go_result;
}


RakNet::RakNetGUID *_wrap_new_RakNetGUID_wrapper_e0979a90da1444b2() {
  RakNet::RakNetGUID *result = 0 ;
  RakNet::RakNetGUID *_swig_go_result;
  
  
  result = (RakNet::RakNetGUID *)new RakNet::RakNetGUID();
  *(RakNet::RakNetGUID **)&_swig_go_result = (RakNet::RakNetGUID *)result; 
  return _swig_go_result;
}


void _wrap_delete_RakNetGUID_wrapper_e0979a90da1444b2(RakNet::RakNetGUID *_swig_go_0) {
  RakNet::RakNetGUID *arg1 = (RakNet::RakNetGUID *) 0 ;
  
  arg1 = *(RakNet::RakNetGUID **)&_swig_go_0; 
  
  delete arg1;
  
}


RakNet::AddressOrGUID *_wrap_new_AddressOrGUID_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  RakNet::AddressOrGUID *result = 0 ;
  RakNet::AddressOrGUID *_swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result = (RakNet::AddressOrGUID *)new RakNet::AddressOrGUID(arg1);
  *(RakNet::AddressOrGUID **)&_swig_go_result = (RakNet::AddressOrGUID *)result; 
  return _swig_go_result;
}


void _wrap_AddressOrGUID_rakNetGuid_set_wrapper_e0979a90da1444b2(RakNet::AddressOrGUID *_swig_go_0, RakNet::RakNetGUID *_swig_go_1) {
  RakNet::AddressOrGUID *arg1 = (RakNet::AddressOrGUID *) 0 ;
  RakNet::RakNetGUID *arg2 = (RakNet::RakNetGUID *) 0 ;
  
  arg1 = *(RakNet::AddressOrGUID **)&_swig_go_0; 
  arg2 = *(RakNet::RakNetGUID **)&_swig_go_1; 
  
  if (arg1) (arg1)->rakNetGuid = *arg2;
  
}


RakNet::RakNetGUID *_wrap_AddressOrGUID_rakNetGuid_get_wrapper_e0979a90da1444b2(RakNet::AddressOrGUID *_swig_go_0) {
  RakNet::AddressOrGUID *arg1 = (RakNet::AddressOrGUID *) 0 ;
  RakNet::RakNetGUID *result = 0 ;
  RakNet::RakNetGUID *_swig_go_result;
  
  arg1 = *(RakNet::AddressOrGUID **)&_swig_go_0; 
  
  result = (RakNet::RakNetGUID *)& ((arg1)->rakNetGuid);
  *(RakNet::RakNetGUID **)&_swig_go_result = (RakNet::RakNetGUID *)result; 
  return _swig_go_result;
}


void _wrap_AddressOrGUID_systemAddress_set_wrapper_e0979a90da1444b2(RakNet::AddressOrGUID *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::AddressOrGUID *arg1 = (RakNet::AddressOrGUID *) 0 ;
  RakNet::SystemAddress *arg2 = (RakNet::SystemAddress *) 0 ;
  
  arg1 = *(RakNet::AddressOrGUID **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  if (arg1) (arg1)->systemAddress = *arg2;
  
}


RakNet::SystemAddress *_wrap_AddressOrGUID_systemAddress_get_wrapper_e0979a90da1444b2(RakNet::AddressOrGUID *_swig_go_0) {
  RakNet::AddressOrGUID *arg1 = (RakNet::AddressOrGUID *) 0 ;
  RakNet::SystemAddress *result = 0 ;
  RakNet::SystemAddress *_swig_go_result;
  
  arg1 = *(RakNet::AddressOrGUID **)&_swig_go_0; 
  
  result = (RakNet::SystemAddress *)& ((arg1)->systemAddress);
  *(RakNet::SystemAddress **)&_swig_go_result = (RakNet::SystemAddress *)result; 
  return _swig_go_result;
}


void _wrap_delete_AddressOrGUID_wrapper_e0979a90da1444b2(RakNet::AddressOrGUID *_swig_go_0) {
  RakNet::AddressOrGUID *arg1 = (RakNet::AddressOrGUID *) 0 ;
  
  arg1 = *(RakNet::AddressOrGUID **)&_swig_go_0; 
  
  delete arg1;
  
}


RakNet::SystemAddress *_wrap_new_SystemAddress__SWIG_0_wrapper_e0979a90da1444b2() {
  RakNet::SystemAddress *result = 0 ;
  RakNet::SystemAddress *_swig_go_result;
  
  
  result = (RakNet::SystemAddress *)new RakNet::SystemAddress();
  *(RakNet::SystemAddress **)&_swig_go_result = (RakNet::SystemAddress *)result; 
  return _swig_go_result;
}


RakNet::SystemAddress *_wrap_new_SystemAddress__SWIG_1_wrapper_e0979a90da1444b2(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  RakNet::SystemAddress *result = 0 ;
  RakNet::SystemAddress *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  
  result = (RakNet::SystemAddress *)new RakNet::SystemAddress((char const *)arg1);
  *(RakNet::SystemAddress **)&_swig_go_result = (RakNet::SystemAddress *)result; 
  return _swig_go_result;
}


RakNet::SystemAddress *_wrap_new_SystemAddress__SWIG_2_wrapper_e0979a90da1444b2(_gostring_ _swig_go_0, short _swig_go_1) {
  char *arg1 = (char *) 0 ;
  unsigned short arg2 ;
  RakNet::SystemAddress *result = 0 ;
  RakNet::SystemAddress *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  arg2 = (unsigned short)_swig_go_1; 
  
  result = (RakNet::SystemAddress *)new RakNet::SystemAddress((char const *)arg1,arg2);
  *(RakNet::SystemAddress **)&_swig_go_result = (RakNet::SystemAddress *)result; 
  return _swig_go_result;
}


void _wrap_SystemAddress_debugPort_set_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, short _swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  if (arg1) (arg1)->debugPort = arg2;
  
}


short _wrap_SystemAddress_debugPort_get_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  unsigned short result;
  short _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (unsigned short) ((arg1)->debugPort);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SystemAddress_size_wrapper_e0979a90da1444b2() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)RakNet::SystemAddress::size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_SystemAddress_ToInteger_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = 0 ;
  unsigned long result;
  long long _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (unsigned long)RakNet::SystemAddress::ToInteger((RakNet::SystemAddress const &)*arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


char _wrap_SystemAddress_GetIPVersion_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (unsigned char)((RakNet::SystemAddress const *)arg1)->GetIPVersion();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SystemAddress_GetIPPROTO_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (unsigned int)((RakNet::SystemAddress const *)arg1)->GetIPPROTO();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SystemAddress_SetToLoopback__SWIG_0_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  (arg1)->SetToLoopback();
  
}


void _wrap_SystemAddress_SetToLoopback__SWIG_1_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, char _swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  (arg1)->SetToLoopback(arg2);
  
}


bool _wrap_SystemAddress_IsLoopback_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (bool)((RakNet::SystemAddress const *)arg1)->IsLoopback();
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_SystemAddress_ToString__SWIG_0_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, bool _swig_go_1, char _swig_go_2) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  bool arg2 ;
  char arg3 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (char)_swig_go_2; 
  
  result = (char *)((RakNet::SystemAddress const *)arg1)->ToString(arg2,arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_SystemAddress_ToString__SWIG_1_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, bool _swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  bool arg2 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = (char *)((RakNet::SystemAddress const *)arg1)->ToString(arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_SystemAddress_ToString__SWIG_2_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (char *)((RakNet::SystemAddress const *)arg1)->ToString();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_SystemAddress_ToString__SWIG_3_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, bool _swig_go_1, _gostring_ _swig_go_2, char _swig_go_3) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char arg4 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  arg4 = (char)_swig_go_3; 
  
  ((RakNet::SystemAddress const *)arg1)->ToString(arg2,arg3,arg4);
  
}


void _wrap_SystemAddress_ToString__SWIG_4_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, bool _swig_go_1, _gostring_ _swig_go_2) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  
  ((RakNet::SystemAddress const *)arg1)->ToString(arg2,arg3);
  
}


bool _wrap_SystemAddress_FromString__SWIG_0_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, _gostring_ _swig_go_1, char _swig_go_2, intgo _swig_go_3) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  result = (bool)(arg1)->FromString((char const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SystemAddress_FromString__SWIG_1_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, _gostring_ _swig_go_1, char _swig_go_2) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char)_swig_go_2; 
  
  result = (bool)(arg1)->FromString((char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SystemAddress_FromString__SWIG_2_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, _gostring_ _swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (bool)(arg1)->FromString((char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SystemAddress_FromStringExplicitPort__SWIG_0_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, _gostring_ _swig_go_1, short _swig_go_2, intgo _swig_go_3) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (unsigned short)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  result = (bool)(arg1)->FromStringExplicitPort((char const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SystemAddress_FromStringExplicitPort__SWIG_1_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, _gostring_ _swig_go_1, short _swig_go_2) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (unsigned short)_swig_go_2; 
  
  result = (bool)(arg1)->FromStringExplicitPort((char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SystemAddress_CopyPort_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemAddress *arg2 = 0 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  (arg1)->CopyPort((RakNet::SystemAddress const &)*arg2);
  
}


bool _wrap_SystemAddress_EqualsExcludingPort_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemAddress *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  result = (bool)((RakNet::SystemAddress const *)arg1)->EqualsExcludingPort((RakNet::SystemAddress const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


short _wrap_SystemAddress_GetPort_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  unsigned short result;
  short _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (unsigned short)((RakNet::SystemAddress const *)arg1)->GetPort();
  _swig_go_result = result; 
  return _swig_go_result;
}


short _wrap_SystemAddress_GetPortNetworkOrder_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  unsigned short result;
  short _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (unsigned short)((RakNet::SystemAddress const *)arg1)->GetPortNetworkOrder();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SystemAddress_SetPortHostOrder_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, short _swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  (arg1)->SetPortHostOrder(arg2);
  
}


void _wrap_SystemAddress_SetPortNetworkOrder_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, short _swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  (arg1)->SetPortNetworkOrder(arg2);
  
}


bool _wrap_SystemAddress_SetBinaryAddress__SWIG_0_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, _gostring_ _swig_go_1, char _swig_go_2) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char)_swig_go_2; 
  
  result = (bool)(arg1)->SetBinaryAddress((char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SystemAddress_SetBinaryAddress__SWIG_1_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, _gostring_ _swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (bool)(arg1)->SetBinaryAddress((char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SystemAddress_ToString_Old__SWIG_0_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, bool _swig_go_1, _gostring_ _swig_go_2, char _swig_go_3) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char arg4 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  arg4 = (char)_swig_go_3; 
  
  ((RakNet::SystemAddress const *)arg1)->ToString_Old(arg2,arg3,arg4);
  
}


void _wrap_SystemAddress_ToString_Old__SWIG_1_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, bool _swig_go_1, _gostring_ _swig_go_2) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  
  ((RakNet::SystemAddress const *)arg1)->ToString_Old(arg2,arg3);
  
}


void _wrap_SystemAddress_FixForIPVersion_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemAddress *arg2 = 0 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  (arg1)->FixForIPVersion((RakNet::SystemAddress const &)*arg2);
  
}


bool _wrap_SystemAddress_IsLANAddress_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (bool)(arg1)->IsLANAddress();
  _swig_go_result = result; 
  return _swig_go_result;
}


RakNet::SystemAddress *_wrap_SystemAddress_Copy_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemAddress *arg2 = 0 ;
  RakNet::SystemAddress *result = 0 ;
  RakNet::SystemAddress *_swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  result = (RakNet::SystemAddress *) &(arg1)->operator =((RakNet::SystemAddress const &)*arg2);
  *(RakNet::SystemAddress **)&_swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SystemAddress_Equals_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemAddress *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  result = (bool)((RakNet::SystemAddress const *)arg1)->operator ==((RakNet::SystemAddress const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SystemAddress_NotEquals_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemAddress *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  result = (bool)((RakNet::SystemAddress const *)arg1)->operator !=((RakNet::SystemAddress const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SystemAddress_GreaterThan_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemAddress *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  result = (bool)((RakNet::SystemAddress const *)arg1)->operator >((RakNet::SystemAddress const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SystemAddress_LessThan_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemAddress *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  result = (bool)((RakNet::SystemAddress const *)arg1)->operator <((RakNet::SystemAddress const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SystemAddress_systemIndex_set_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0, short _swig_go_1) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemIndex arg2 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  arg2 = (RakNet::SystemIndex)_swig_go_1; 
  
  if (arg1) (arg1)->systemIndex = arg2;
  
}


short _wrap_SystemAddress_systemIndex_get_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  RakNet::SystemIndex result;
  short _swig_go_result;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  result = (RakNet::SystemIndex) ((arg1)->systemIndex);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_SystemAddress_wrapper_e0979a90da1444b2(RakNet::SystemAddress *_swig_go_0) {
  RakNet::SystemAddress *arg1 = (RakNet::SystemAddress *) 0 ;
  
  arg1 = *(RakNet::SystemAddress **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Packet_systemAddress_set_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0, RakNet::SystemAddress *_swig_go_1) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  RakNet::SystemAddress *arg2 = (RakNet::SystemAddress *) 0 ;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  arg2 = *(RakNet::SystemAddress **)&_swig_go_1; 
  
  if (arg1) (arg1)->systemAddress = *arg2;
  
}


RakNet::SystemAddress *_wrap_Packet_systemAddress_get_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  RakNet::SystemAddress *result = 0 ;
  RakNet::SystemAddress *_swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result = (RakNet::SystemAddress *)& ((arg1)->systemAddress);
  *(RakNet::SystemAddress **)&_swig_go_result = (RakNet::SystemAddress *)result; 
  return _swig_go_result;
}


void _wrap_Packet_guid_set_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0, RakNet::RakNetGUID *_swig_go_1) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  RakNet::RakNetGUID *arg2 = (RakNet::RakNetGUID *) 0 ;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  arg2 = *(RakNet::RakNetGUID **)&_swig_go_1; 
  
  if (arg1) (arg1)->guid = *arg2;
  
}


RakNet::RakNetGUID *_wrap_Packet_guid_get_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  RakNet::RakNetGUID *result = 0 ;
  RakNet::RakNetGUID *_swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result = (RakNet::RakNetGUID *)& ((arg1)->guid);
  *(RakNet::RakNetGUID **)&_swig_go_result = (RakNet::RakNetGUID *)result; 
  return _swig_go_result;
}


void _wrap_Packet_length_set_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0, intgo _swig_go_1) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->length = arg2;
  
}


intgo _wrap_Packet_length_get_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->length);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Packet_bitSize_set_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0, uint32_t *_swig_go_1) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  argp2 = (uint32_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg2 = (uint32_t)*argp2;
  
  
  if (arg1) (arg1)->bitSize = arg2;
  
}


uint32_t *_wrap_Packet_bitSize_get_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  uint32_t result;
  uint32_t *_swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result =  ((arg1)->bitSize);
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


void _wrap_Packet_data_set_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0, char *_swig_go_1) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  
  if (arg1) (arg1)->data = arg2;
  
}


char *_wrap_Packet_data_get_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  unsigned char *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result = (unsigned char *) ((arg1)->data);
  *(unsigned char **)&_swig_go_result = (unsigned char *)result; 
  return _swig_go_result;
}


void _wrap_Packet_deleteData_set_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0, bool _swig_go_1) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  bool arg2 ;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->deleteData = arg2;
  
}


bool _wrap_Packet_deleteData_get_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result = (bool) ((arg1)->deleteData);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Packet_wasGeneratedLocally_set_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0, bool _swig_go_1) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  bool arg2 ;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->wasGeneratedLocally = arg2;
  
}


bool _wrap_Packet_wasGeneratedLocally_get_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  result = (bool) ((arg1)->wasGeneratedLocally);
  _swig_go_result = result; 
  return _swig_go_result;
}


RakNet::Packet *_wrap_new_Packet_wrapper_e0979a90da1444b2() {
  RakNet::Packet *result = 0 ;
  RakNet::Packet *_swig_go_result;
  
  
  result = (RakNet::Packet *)new RakNet::Packet();
  *(RakNet::Packet **)&_swig_go_result = (RakNet::Packet *)result; 
  return _swig_go_result;
}


void _wrap_delete_Packet_wrapper_e0979a90da1444b2(RakNet::Packet *_swig_go_0) {
  RakNet::Packet *arg1 = (RakNet::Packet *) 0 ;
  
  arg1 = *(RakNet::Packet **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_PKM_INSECURE_CONNECTION_wrapper_e0979a90da1444b2() {
  RakNet::PublicKeyMode result;
  intgo _swig_go_result;
  
  
  result = RakNet::PKM_INSECURE_CONNECTION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PKM_ACCEPT_ANY_PUBLIC_KEY_wrapper_e0979a90da1444b2() {
  RakNet::PublicKeyMode result;
  intgo _swig_go_result;
  
  
  result = RakNet::PKM_ACCEPT_ANY_PUBLIC_KEY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PKM_USE_KNOWN_PUBLIC_KEY_wrapper_e0979a90da1444b2() {
  RakNet::PublicKeyMode result;
  intgo _swig_go_result;
  
  
  result = RakNet::PKM_USE_KNOWN_PUBLIC_KEY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PKM_USE_TWO_WAY_AUTHENTICATION_wrapper_e0979a90da1444b2() {
  RakNet::PublicKeyMode result;
  intgo _swig_go_result;
  
  
  result = RakNet::PKM_USE_TWO_WAY_AUTHENTICATION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_PublicKey_publicKeyMode_set_wrapper_e0979a90da1444b2(RakNet::PublicKey *_swig_go_0, intgo _swig_go_1) {
  RakNet::PublicKey *arg1 = (RakNet::PublicKey *) 0 ;
  RakNet::PublicKeyMode arg2 ;
  
  arg1 = *(RakNet::PublicKey **)&_swig_go_0; 
  arg2 = (RakNet::PublicKeyMode)_swig_go_1; 
  
  if (arg1) (arg1)->publicKeyMode = arg2;
  
}


intgo _wrap_PublicKey_publicKeyMode_get_wrapper_e0979a90da1444b2(RakNet::PublicKey *_swig_go_0) {
  RakNet::PublicKey *arg1 = (RakNet::PublicKey *) 0 ;
  RakNet::PublicKeyMode result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::PublicKey **)&_swig_go_0; 
  
  result = (RakNet::PublicKeyMode) ((arg1)->publicKeyMode);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_PublicKey_remoteServerPublicKey_set_wrapper_e0979a90da1444b2(RakNet::PublicKey *_swig_go_0, _gostring_ _swig_go_1) {
  RakNet::PublicKey *arg1 = (RakNet::PublicKey *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(RakNet::PublicKey **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    delete [] arg1->remoteServerPublicKey;
    if (arg2) {
      arg1->remoteServerPublicKey = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->remoteServerPublicKey, (const char *)arg2);
    } else {
      arg1->remoteServerPublicKey = 0;
    }
  }
  
}


_gostring_ _wrap_PublicKey_remoteServerPublicKey_get_wrapper_e0979a90da1444b2(RakNet::PublicKey *_swig_go_0) {
  RakNet::PublicKey *arg1 = (RakNet::PublicKey *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RakNet::PublicKey **)&_swig_go_0; 
  
  result = (char *) ((arg1)->remoteServerPublicKey);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_PublicKey_myPublicKey_set_wrapper_e0979a90da1444b2(RakNet::PublicKey *_swig_go_0, _gostring_ _swig_go_1) {
  RakNet::PublicKey *arg1 = (RakNet::PublicKey *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(RakNet::PublicKey **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    delete [] arg1->myPublicKey;
    if (arg2) {
      arg1->myPublicKey = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->myPublicKey, (const char *)arg2);
    } else {
      arg1->myPublicKey = 0;
    }
  }
  
}


_gostring_ _wrap_PublicKey_myPublicKey_get_wrapper_e0979a90da1444b2(RakNet::PublicKey *_swig_go_0) {
  RakNet::PublicKey *arg1 = (RakNet::PublicKey *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RakNet::PublicKey **)&_swig_go_0; 
  
  result = (char *) ((arg1)->myPublicKey);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_PublicKey_myPrivateKey_set_wrapper_e0979a90da1444b2(RakNet::PublicKey *_swig_go_0, _gostring_ _swig_go_1) {
  RakNet::PublicKey *arg1 = (RakNet::PublicKey *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(RakNet::PublicKey **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    delete [] arg1->myPrivateKey;
    if (arg2) {
      arg1->myPrivateKey = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->myPrivateKey, (const char *)arg2);
    } else {
      arg1->myPrivateKey = 0;
    }
  }
  
}


_gostring_ _wrap_PublicKey_myPrivateKey_get_wrapper_e0979a90da1444b2(RakNet::PublicKey *_swig_go_0) {
  RakNet::PublicKey *arg1 = (RakNet::PublicKey *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RakNet::PublicKey **)&_swig_go_0; 
  
  result = (char *) ((arg1)->myPrivateKey);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


RakNet::PublicKey *_wrap_new_PublicKey_wrapper_e0979a90da1444b2() {
  RakNet::PublicKey *result = 0 ;
  RakNet::PublicKey *_swig_go_result;
  
  
  result = (RakNet::PublicKey *)new RakNet::PublicKey();
  *(RakNet::PublicKey **)&_swig_go_result = (RakNet::PublicKey *)result; 
  return _swig_go_result;
}


void _wrap_delete_PublicKey_wrapper_e0979a90da1444b2(RakNet::PublicKey *_swig_go_0) {
  RakNet::PublicKey *arg1 = (RakNet::PublicKey *) 0 ;
  
  arg1 = *(RakNet::PublicKey **)&_swig_go_0; 
  
  delete arg1;
  
}


RakNet::RakPeerInterface *_wrap_RakPeerInterface_GetInstance_wrapper_e0979a90da1444b2() {
  RakNet::RakPeerInterface *result = 0 ;
  RakNet::RakPeerInterface *_swig_go_result;
  
  
  result = (RakNet::RakPeerInterface *)RakNet::RakPeerInterface::GetInstance();
  *(RakNet::RakPeerInterface **)&_swig_go_result = (RakNet::RakPeerInterface *)result; 
  return _swig_go_result;
}


void _wrap_RakPeerInterface_DestroyInstance_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  
  RakNet::RakPeerInterface::DestroyInstance(arg1);
  
}


void _wrap_delete_RakPeerInterface_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RakPeerInterface_Startup__SWIG_0_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, intgo _swig_go_1, RakNet::SocketDescriptor *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  unsigned int arg2 ;
  RakNet::SocketDescriptor *arg3 = (RakNet::SocketDescriptor *) 0 ;
  unsigned int arg4 ;
  int arg5 ;
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(RakNet::SocketDescriptor **)&_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  
  result = (RakNet::StartupResult)(arg1)->Startup(arg2,arg3,arg4,arg5);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RakPeerInterface_Startup__SWIG_1_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, intgo _swig_go_1, RakNet::SocketDescriptor *_swig_go_2, intgo _swig_go_3) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  unsigned int arg2 ;
  RakNet::SocketDescriptor *arg3 = (RakNet::SocketDescriptor *) 0 ;
  unsigned int arg4 ;
  RakNet::StartupResult result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(RakNet::SocketDescriptor **)&_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = (RakNet::StartupResult)(arg1)->Startup(arg2,arg3,arg4);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_RakPeerInterface_SetMaximumIncomingConnections_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, short _swig_go_1) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  (arg1)->SetMaximumIncomingConnections(arg2);
  
}


intgo _wrap_RakPeerInterface_Connect__SWIG_0_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, _gostring_ _swig_go_1, short _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, RakNet::PublicKey *_swig_go_5, intgo _swig_go_6, intgo _swig_go_7, intgo _swig_go_8, uint32_t *_swig_go_9) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  RakNet::PublicKey *arg6 = (RakNet::PublicKey *) 0 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  RakNet::TimeMS arg10 ;
  RakNet::TimeMS *argp10 ;
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (unsigned short)_swig_go_2; 
  arg4 = (char *)_swig_go_3.p; 
  arg5 = (int)_swig_go_4; 
  arg6 = *(RakNet::PublicKey **)&_swig_go_5; 
  arg7 = (unsigned int)_swig_go_6; 
  arg8 = (unsigned int)_swig_go_7; 
  arg9 = (unsigned int)_swig_go_8; 
  
  argp10 = (RakNet::TimeMS *)_swig_go_9;
  if (argp10 == NULL) {
    _swig_gopanic("Attempt to dereference null RakNet::TimeMS");
  }
  arg10 = (RakNet::TimeMS)*argp10;
  
  
  result = (RakNet::ConnectionAttemptResult)(arg1)->Connect((char const *)arg2,arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RakPeerInterface_Connect__SWIG_1_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, _gostring_ _swig_go_1, short _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, RakNet::PublicKey *_swig_go_5, intgo _swig_go_6, intgo _swig_go_7, intgo _swig_go_8) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  RakNet::PublicKey *arg6 = (RakNet::PublicKey *) 0 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (unsigned short)_swig_go_2; 
  arg4 = (char *)_swig_go_3.p; 
  arg5 = (int)_swig_go_4; 
  arg6 = *(RakNet::PublicKey **)&_swig_go_5; 
  arg7 = (unsigned int)_swig_go_6; 
  arg8 = (unsigned int)_swig_go_7; 
  arg9 = (unsigned int)_swig_go_8; 
  
  result = (RakNet::ConnectionAttemptResult)(arg1)->Connect((char const *)arg2,arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RakPeerInterface_Connect__SWIG_2_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, _gostring_ _swig_go_1, short _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, RakNet::PublicKey *_swig_go_5, intgo _swig_go_6, intgo _swig_go_7) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  RakNet::PublicKey *arg6 = (RakNet::PublicKey *) 0 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (unsigned short)_swig_go_2; 
  arg4 = (char *)_swig_go_3.p; 
  arg5 = (int)_swig_go_4; 
  arg6 = *(RakNet::PublicKey **)&_swig_go_5; 
  arg7 = (unsigned int)_swig_go_6; 
  arg8 = (unsigned int)_swig_go_7; 
  
  result = (RakNet::ConnectionAttemptResult)(arg1)->Connect((char const *)arg2,arg3,(char const *)arg4,arg5,arg6,arg7,arg8);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RakPeerInterface_Connect__SWIG_3_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, _gostring_ _swig_go_1, short _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, RakNet::PublicKey *_swig_go_5, intgo _swig_go_6) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  RakNet::PublicKey *arg6 = (RakNet::PublicKey *) 0 ;
  unsigned int arg7 ;
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (unsigned short)_swig_go_2; 
  arg4 = (char *)_swig_go_3.p; 
  arg5 = (int)_swig_go_4; 
  arg6 = *(RakNet::PublicKey **)&_swig_go_5; 
  arg7 = (unsigned int)_swig_go_6; 
  
  result = (RakNet::ConnectionAttemptResult)(arg1)->Connect((char const *)arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RakPeerInterface_Connect__SWIG_4_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, _gostring_ _swig_go_1, short _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, RakNet::PublicKey *_swig_go_5) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  RakNet::PublicKey *arg6 = (RakNet::PublicKey *) 0 ;
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (unsigned short)_swig_go_2; 
  arg4 = (char *)_swig_go_3.p; 
  arg5 = (int)_swig_go_4; 
  arg6 = *(RakNet::PublicKey **)&_swig_go_5; 
  
  result = (RakNet::ConnectionAttemptResult)(arg1)->Connect((char const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RakPeerInterface_Connect__SWIG_5_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, _gostring_ _swig_go_1, short _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  RakNet::ConnectionAttemptResult result;
  intgo _swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (unsigned short)_swig_go_2; 
  arg4 = (char *)_swig_go_3.p; 
  arg5 = (int)_swig_go_4; 
  
  result = (RakNet::ConnectionAttemptResult)(arg1)->Connect((char const *)arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


uint32_t *_wrap_RakPeerInterface_Send__SWIG_0_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, char _swig_go_5, RakNet::AddressOrGUID *_swig_go_6, bool _swig_go_7, uint32_t *_swig_go_8) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  PacketPriority arg4 ;
  PacketReliability arg5 ;
  char arg6 ;
  SwigValueWrapper< RakNet::AddressOrGUID > arg7 ;
  bool arg8 ;
  uint32_t arg9 ;
  RakNet::AddressOrGUID const *argp7 ;
  uint32_t *argp9 ;
  uint32_t result;
  uint32_t *_swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (int)_swig_go_2; 
  arg4 = (PacketPriority)_swig_go_3; 
  arg5 = (PacketReliability)_swig_go_4; 
  arg6 = (char)_swig_go_5; 
  
  argp7 = (RakNet::AddressOrGUID *)_swig_go_6;
  if (argp7 == NULL) {
    _swig_gopanic("Attempt to dereference null RakNet::AddressOrGUID const");
  }
  arg7 = (RakNet::AddressOrGUID)*argp7;
  
  arg8 = (bool)_swig_go_7; 
  
  argp9 = (uint32_t *)_swig_go_8;
  if (argp9 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg9 = (uint32_t)*argp9;
  
  
  result = (arg1)->Send((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


uint32_t *_wrap_RakPeerInterface_Send__SWIG_1_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, char _swig_go_5, RakNet::AddressOrGUID *_swig_go_6, bool _swig_go_7) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  PacketPriority arg4 ;
  PacketReliability arg5 ;
  char arg6 ;
  SwigValueWrapper< RakNet::AddressOrGUID > arg7 ;
  bool arg8 ;
  RakNet::AddressOrGUID const *argp7 ;
  uint32_t result;
  uint32_t *_swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (int)_swig_go_2; 
  arg4 = (PacketPriority)_swig_go_3; 
  arg5 = (PacketReliability)_swig_go_4; 
  arg6 = (char)_swig_go_5; 
  
  argp7 = (RakNet::AddressOrGUID *)_swig_go_6;
  if (argp7 == NULL) {
    _swig_gopanic("Attempt to dereference null RakNet::AddressOrGUID const");
  }
  arg7 = (RakNet::AddressOrGUID)*argp7;
  
  arg8 = (bool)_swig_go_7; 
  
  result = (arg1)->Send((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


RakNet::Packet *_wrap_RakPeerInterface_Receive_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  RakNet::Packet *result = 0 ;
  RakNet::Packet *_swig_go_result;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  
  result = (RakNet::Packet *)(arg1)->Receive();
  *(RakNet::Packet **)&_swig_go_result = (RakNet::Packet *)result; 
  return _swig_go_result;
}


void _wrap_RakPeerInterface_DeallocatePacket_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, RakNet::Packet *_swig_go_1) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  RakNet::Packet *arg2 = (RakNet::Packet *) 0 ;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = *(RakNet::Packet **)&_swig_go_1; 
  
  (arg1)->DeallocatePacket(arg2);
  
}


void _wrap_RakPeerInterface_Shutdown__SWIG_0_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, intgo _swig_go_1, char _swig_go_2, intgo _swig_go_3) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  unsigned int arg2 ;
  unsigned char arg3 ;
  PacketPriority arg4 ;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned char)_swig_go_2; 
  arg4 = (PacketPriority)_swig_go_3; 
  
  (arg1)->Shutdown(arg2,arg3,arg4);
  
}


void _wrap_RakPeerInterface_Shutdown__SWIG_1_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, intgo _swig_go_1, char _swig_go_2) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  unsigned int arg2 ;
  unsigned char arg3 ;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned char)_swig_go_2; 
  
  (arg1)->Shutdown(arg2,arg3);
  
}


void _wrap_RakPeerInterface_Shutdown__SWIG_2_wrapper_e0979a90da1444b2(RakNet::RakPeerInterface *_swig_go_0, intgo _swig_go_1) {
  RakNet::RakPeerInterface *arg1 = (RakNet::RakPeerInterface *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(RakNet::RakPeerInterface **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  (arg1)->Shutdown(arg2);
  
}


#ifdef __cplusplus
}
#endif

